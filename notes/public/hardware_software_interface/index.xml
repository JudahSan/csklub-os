<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hardware_software_interfaces on CSKlub Operating System Notes</title>
    <link>http://localhost:1313/hardware_software_interface/</link>
    <description>Recent content in Hardware_software_interfaces on CSKlub Operating System Notes</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Sep 2025 03:36:13 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/hardware_software_interface/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>http://localhost:1313/hardware_software_interface/introduction/</link>
      <pubDate>Tue, 02 Sep 2025 03:36:13 +0300</pubDate>
      <guid>http://localhost:1313/hardware_software_interface/introduction/</guid>
      <description>&lt;h1 id=&#34;the-hardware-software-interface-class&#34;&gt;The Hardware/ Software Interface Class&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;www.cs.sfu.ca/~ashriram/Courses/CS295/assets/books/CSAPP_2016.pdf&#34;&gt;Course text book: Computer Systems&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-big-theme&#34;&gt;The Big Theme&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The hardware/ software interface&lt;/li&gt;&#xA;&lt;li&gt;How does the h/w(0s and 1s, processor executing instructions) relate to the s/w (Go programs)?&lt;/li&gt;&#xA;&lt;li&gt;Computing is about abstractions (but we can&amp;rsquo;t forget reality)&lt;/li&gt;&#xA;&lt;li&gt;What are the abstractions that we use?&lt;/li&gt;&#xA;&lt;li&gt;What do YOU need to know about them?&#xA;&lt;ul&gt;&#xA;&lt;li&gt;When do they break down and you have to peek under the hood?&lt;/li&gt;&#xA;&lt;li&gt;What bugs can they cause and how do you find them?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Become a better programmer and begin to understand the important concepts that have evolved in building ever more complex computer systems.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;roadmap&#34;&gt;Roadmap&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Memory and data&lt;/li&gt;&#xA;&lt;li&gt;Integers and floats&lt;/li&gt;&#xA;&lt;li&gt;Machine code and C&lt;/li&gt;&#xA;&lt;li&gt;x86 assembly&lt;/li&gt;&#xA;&lt;li&gt;Procedures and stacks&lt;/li&gt;&#xA;&lt;li&gt;Arrays and structs&lt;/li&gt;&#xA;&lt;li&gt;Memory and caches&lt;/li&gt;&#xA;&lt;li&gt;Processes&lt;/li&gt;&#xA;&lt;li&gt;Virtual memory&lt;/li&gt;&#xA;&lt;li&gt;Memory allocation&lt;/li&gt;&#xA;&lt;li&gt;Java/Go vs C&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;little-theme-1-representation&#34;&gt;Little theme 1: Representation&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;All digital systems represnt everything as 0s and 1s&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The o and 1 are really two different voltage ranges in the electronics&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Everything includes:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Numbers - integers and floating point&lt;/li&gt;&#xA;&lt;li&gt;Character - the building blocks of strings&lt;/li&gt;&#xA;&lt;li&gt;Instructions - the directives to the CPU that make up a program&lt;/li&gt;&#xA;&lt;li&gt;Pointers - addresses of data objects stored away in memory&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;These encodings are stored throughout a computer system&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In registers, caches, memories, disks, etc&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;They all need addresses&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A way to find them&lt;/li&gt;&#xA;&lt;li&gt;Find a new place to put a new item&lt;/li&gt;&#xA;&lt;li&gt;Reclain the place in memory when data no longer needed&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;little-theme-2-translation&#34;&gt;Little theme 2: Translation&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;There is a big gap between how we thing about programs and data and the 0s and 1s of computers&lt;/li&gt;&#xA;&lt;li&gt;Need languages to describe what we mean&lt;/li&gt;&#xA;&lt;li&gt;Languages need to be translated one step at a time&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Word-by-word&lt;/li&gt;&#xA;&lt;li&gt;Phrase structure&lt;/li&gt;&#xA;&lt;li&gt;Grammar&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;We know Java/Go as a programming language&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Have to work our way down to the 0s and 1s of computers&lt;/li&gt;&#xA;&lt;li&gt;Try not to lose anything in translation!&lt;/li&gt;&#xA;&lt;li&gt;We&amp;rsquo;ll encounter Java/Go byte-code, C language, assembly language, and machine code (for the X86 family of CPU architectues)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;little-theme-3-control-flow&#34;&gt;Little theme 3: Control flow&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How do computers orchestrate the many things they are doing - seemingly in parallel&lt;/li&gt;&#xA;&lt;li&gt;What do we have to keep track of when we call a method, and then another, and then another, and so on&lt;/li&gt;&#xA;&lt;li&gt;How do we know what to do upon &amp;ldquo;return&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;How do we run multiple user programs and let them share a sigle computer and memory&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
